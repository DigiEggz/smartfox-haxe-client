package com.smartfoxserver.v2.entities
{
	import com.smartfoxserver.v2.entities.managers.IRoomManager;
	import com.smartfoxserver.v2.entities.variables.RoomVariable;
	
	/**
	 * The <em>Room</em> interface defines all the methods and properties that an object representing a SmartFoxServer Room entity exposes.
	 * <p>In the SmartFoxServer 2X client API this interface is implemented by the <em>SFSRoom</em> class. Read the class description for additional informations.</p>
	 * 
	 * @see 	SFSRoom
	 */
	public interface Room
	{
		/**
		 * Indicates the id of this Room.
		 * It is unique and it is generated by the server when the Room is created.
		 */
		function get id():int
		
		/**
		 * Indicates the name of this Room.
		 * Two Rooms in the same Zone can't have the same name.
		 * 
		 * <p><b>NOTE</b>: setting the <em>name</em> property manually has no effect on the server and can disrupt the API functioning.
		 * Use the <em>ChangeRoomNameRequest</em> request instead.</p>
		 * 
		 * @see com.smartfoxserver.v2.requests.ChangeRoomNameRequest ChangeRoomNameRequest
		 */
		function get name():String
		
		/** @private */
		function set name(value:String):void
		
		/** 
		 * Returns the Room Group name.
		 * Each Group is identified by a unique string (its name or id) and it represents a different "container" for Rooms.
		 * <p>Room Groups enable developers to organize Rooms under different types or categories and let clients select only those Groups they are interested in, in order to receive their events only.
		 * This is done via the <em>SubscribeRoomGroupRequest</em> and <em>UnsubscribeRoomGroupRequest</em> requests.</p>
		 * 
		 * @default default
		 * 
		 * @see com.smartfoxserver.v2.requests.SubscribeRoomGroupRequest SubscribeRoomGroupRequest
		 * @see com.smartfoxserver.v2.requests.UnsubscribeRoomGroupRequest UnsubscribeRoomGroupRequest
		 */	
		function get groupId():String
		
		/**
		 * Indicates whether the client joined this Room or not.
		 * 
		 * <p><b>NOTE</b>: setting the <em>isJoined</em> property manually has no effect on the server and can disrupt the API functioning.
		 * Use the <em>JoinRoomRequest</em> request to join a new Room instead.</p>
		 * 
		 * @see com.smartfoxserver.v2.requests.JoinRoomRequest JoinRoomRequest
		 */
		function get isJoined():Boolean
		
		/**
		 * Indicates whether this is a Game Room or not.
		 * 
		 * <p><b>NOTE</b>: setting the <em>isGame</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag must be set when creating the Room.</p>
		 */
		function get isGame():Boolean
		
		/**
		 * Indicates whether this Room is hidden or not.
		 * This is a utility flag that can be used by developers to hide certain Rooms from the interface of their application.
		 * 
		 * <p><b>NOTE</b>: setting the <em>isHidden</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag must be set when creating the Room.</p>
		 */
		function get isHidden():Boolean
		
		/**
		 * Indicates whether this Room requires a password to be joined or not.
		 * 
		 * <p><b>NOTE</b>: setting the <em>isPasswordProtected</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag depends on the Room's password set when the Room is created or by means of the <em>ChangeRoomPasswordStateRequest</em> request.</p>
		 * 
		 * @see com.smartfoxserver.v2.requests.ChangeRoomPasswordStateRequest ChangeRoomPasswordStateRequest
		 */ 
		function get isPasswordProtected():Boolean
			
		/** @private */
		function set isPasswordProtected(value:Boolean):void
		
		/** @private */
		function get isManaged():Boolean
		
		/**
		 * Returns the current number of users in this Room.
		 * In case of Game Rooms, this is the number of players.
		 * 
		 * <p><b>NOTE</b>: setting the <em>userCount</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag depends on the Room state.</p>
		 */
		function get userCount():int
		
		/**
		 * Returns the maximum number of users allowed in this Room.
		 * In case of Game Rooms, this is the maximum number of players.
		 * 
		 * <p><b>NOTE</b>: setting the <em>maxUsers</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag must be set when creating the Room.</p>
		 */
		function get maxUsers():int
		
		/**
		 * Returns the current number of spectators in this Room (Game Rooms only).
		 * 
		 * <p><b>NOTE</b>: setting the <em>spectatorCount</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag depends on the Room state.</p>
		 */
		function get spectatorCount():int
		
		/**
		 * Returns the maximum number of spectators allowed in this Room (Game Rooms only).
		 * 
		 * <p><b>NOTE</b>: setting the <em>maxSpectators</em> property manually has no effect on the server and can disrupt the API functioning.
		 * This flag must be set when creating the Game Room.</p>
		 */
		function get maxSpectators():int
				
		/**
		 * Returns the maximum amount of users, including spectators, that can be contained in this Room.
		 */
		function get capacity():int
		
		/** @private */
		function set isJoined(value:Boolean):void
		
		/** @private */
		function set isGame(value:Boolean):void
			
		/** @private */
		function set isHidden(value:Boolean):void
		
		/** @private */
		function set isManaged(value:Boolean):void
		
		/** @private */
		function set userCount(value:int):void
		
		/** @private */
		function set maxUsers(value:int):void
		
		/** @private */
		function set spectatorCount(value:int):void
		
		/** @private */
		function set maxSpectators(value:int):void
		
		/** @private */
		function addUser(user:User):void
		
		/** @private */
		function removeUser(user:User):void
		
		/**
		 * Indicates whether the specified user is currently inside this Room or not.
		 * 
		 * @param	user	The <em>User</em> object representing the user whose presence in this Room must be checked.
		 * 
		 * @return	<code>true</code> if the user is inside this Room; <code>false</code> otherwise.
		 */
		function containsUser(user:User):Boolean
		
		/**
		 * Retrieves a <em>User</em> object from its <em>name</em> property.
		 * 
		 * @param	name	The name of the user to be found.
		 * 
		 * @return	The <em>User</em> object representing the user, or <code>null</code> if no user with the passed name exists in this Room.
		 * 
		 * @see		#getUserById()
		 */ 
		function getUserByName(name:String):User
		
		/**
		 * Retrieves a <em>User</em> object from its <em>id</em> property.
		 * 
		 * @param	id	The id of the user to be retrieved.
		 * 
		 * @return	The <em>User</em> object representing the user, or <code>null</code> if no user with the passed id exists in this Room.
		 * 
		 * @see		#getUserByName()
		 */ 
		function getUserById(id:int):User
		
		/**
		 * Returns a list of <em>User</em> objects representing all the users currently inside this Room.
		 */
		function get userList():Array
		
		/**
		 * Returns a list of <em>User</em> objects representing the players currently inside this Room (Game Rooms only).
		 */
		function get playerList():Array
		
		/**
		 * Returns a list of <em>User</em> objects representing the spectators currently inside this Room (Game Rooms only).
		 */
		function get spectatorList():Array
		
		/**
		 * Retrieves a Room Variable from its name.
		 * 
		 * @param	name	The name of the Room Variable to be retrieved.
		 * 
		 * @return	The <em>RoomVariable</em> object representing the Room Variable, or <code>null</code> if no Room Variable with the passed name exists in this Room.
		 * 
		 * @see		#getVariables()
		 * @see 	com.smartfoxserver.v2.requests.SetRoomVariablesRequest SetRoomVariablesRequest
		 */ 
		function getVariable(name:String):RoomVariable
		
		/**
		 * Retrieves all the Room Variables of this Room.
		 * 
		 * @return	The list of <em>RoomVariable</em> objects associated with this Room.
		 * 
		 * @see		com.smartfoxserver.v2.entities.variables.RoomVariable RoomVariable
		 * @see		#getVariable()
		 */ 
		function getVariables():Array
		
		/** @private */
		function setVariable(roomVariable:RoomVariable):void
		
		/** @private */
		function setVariables(roomVariables:Array):void
		
		/**
		 * Indicates whether this Room has the specified Room Variable set or not.
		 * 
		 * @param	name	The name of the Room Variable whose existance in this Room must be checked.
		 * 
		 * @return	<code>true</code> if a Room Variable with the passed name exists in this Room.
		 */
		function containsVariable(name:String):Boolean
		
		/** 
		 * Defines a generic utility object that can be used to store custom Room data.
		 * The values added to this object are for client-side use only and are never transmitted to the server or to the other clients.
		 */
		function get properties():Object
		
		/** @private */
		function set properties(value:Object):void
		
		/**
		 * Returns a reference to the Room Manager which manages this Room.
		 * 
		 * <p><b>NOTE</b>: setting the <em>roomManager</em> property manually has no effect on the server and can disrupt the API functioning.</p>
		 */
		function get roomManager():IRoomManager
		
		/** @private */
		function set roomManager(manager:IRoomManager):void	
		
		/** @private */
		function setPasswordProtected(isProtected:Boolean):void
	}
}